Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> factor
Rule 2     factor -> ID
Rule 3     factor -> NAT
Rule 4     expr -> IF ( expr ) THEN expr ELSE expr
Rule 5     factor -> ( expr )
Rule 6     expr -> expr factor
Rule 7     factor -> LAMBDA ( ID . expr )
Rule 8     factor -> REC ID . LAMBDA ( ID . expr )
Rule 9     expr -> expr PLUS expr
Rule 10    expr -> expr MINUS expr
Rule 11    expr -> expr TIMES expr
Rule 12    expr -> expr DIVIDE expr
Rule 13    expr -> expr MOD expr
Rule 14    expr -> expr LT expr
Rule 15    expr -> expr LE expr
Rule 16    expr -> expr GT expr
Rule 17    expr -> expr GE expr
Rule 18    expr -> expr EQ expr
Rule 19    expr -> expr NEQ expr
Rule 20    expr -> MINUS expr
Rule 21    expr -> PLUS expr

Terminals, with rules where they appear

(                    : 4 5 7 8
)                    : 4 5 7 8
.                    : 7 8 8
DIVIDE               : 12
ELSE                 : 4
EQ                   : 18
GE                   : 17
GT                   : 16
ID                   : 2 7 8 8
IF                   : 4
LAMBDA               : 7 8
LE                   : 15
LT                   : 14
MINUS                : 10 20
MOD                  : 13
NAT                  : 3
NEQ                  : 19
PLUS                 : 9 21
REC                  : 8
THEN                 : 4
TIMES                : 11
error                : 

Nonterminals, with rules where they appear

expr                 : 4 4 4 5 6 7 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 21 0
factor               : 1 6

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 1
    factor                         shift and go to state 2

state 1

    (0) S' -> expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    GT              shift and go to state 19
    GE              shift and go to state 20
    EQ              shift and go to state 21
    NEQ             shift and go to state 22
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    factor                         shift and go to state 11

state 2

    (1) expr -> factor .

    PLUS            reduce using rule 1 (expr -> factor .)
    MINUS           reduce using rule 1 (expr -> factor .)
    TIMES           reduce using rule 1 (expr -> factor .)
    DIVIDE          reduce using rule 1 (expr -> factor .)
    MOD             reduce using rule 1 (expr -> factor .)
    LT              reduce using rule 1 (expr -> factor .)
    LE              reduce using rule 1 (expr -> factor .)
    GT              reduce using rule 1 (expr -> factor .)
    GE              reduce using rule 1 (expr -> factor .)
    EQ              reduce using rule 1 (expr -> factor .)
    NEQ             reduce using rule 1 (expr -> factor .)
    ID              reduce using rule 1 (expr -> factor .)
    NAT             reduce using rule 1 (expr -> factor .)
    (               reduce using rule 1 (expr -> factor .)
    LAMBDA          reduce using rule 1 (expr -> factor .)
    REC             reduce using rule 1 (expr -> factor .)
    $end            reduce using rule 1 (expr -> factor .)
    )               reduce using rule 1 (expr -> factor .)
    ELSE            reduce using rule 1 (expr -> factor .)


state 3

    (4) expr -> IF . ( expr ) THEN expr ELSE expr

    (               shift and go to state 23


state 4

    (5) factor -> ( . expr )
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 24
    factor                         shift and go to state 2

state 5

    (21) expr -> PLUS . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 25
    factor                         shift and go to state 2

state 6

    (20) expr -> MINUS . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 26
    factor                         shift and go to state 2

state 7

    (2) factor -> ID .

    PLUS            reduce using rule 2 (factor -> ID .)
    MINUS           reduce using rule 2 (factor -> ID .)
    TIMES           reduce using rule 2 (factor -> ID .)
    DIVIDE          reduce using rule 2 (factor -> ID .)
    MOD             reduce using rule 2 (factor -> ID .)
    LT              reduce using rule 2 (factor -> ID .)
    LE              reduce using rule 2 (factor -> ID .)
    GT              reduce using rule 2 (factor -> ID .)
    GE              reduce using rule 2 (factor -> ID .)
    EQ              reduce using rule 2 (factor -> ID .)
    NEQ             reduce using rule 2 (factor -> ID .)
    ID              reduce using rule 2 (factor -> ID .)
    NAT             reduce using rule 2 (factor -> ID .)
    (               reduce using rule 2 (factor -> ID .)
    LAMBDA          reduce using rule 2 (factor -> ID .)
    REC             reduce using rule 2 (factor -> ID .)
    $end            reduce using rule 2 (factor -> ID .)
    )               reduce using rule 2 (factor -> ID .)
    ELSE            reduce using rule 2 (factor -> ID .)


state 8

    (3) factor -> NAT .

    PLUS            reduce using rule 3 (factor -> NAT .)
    MINUS           reduce using rule 3 (factor -> NAT .)
    TIMES           reduce using rule 3 (factor -> NAT .)
    DIVIDE          reduce using rule 3 (factor -> NAT .)
    MOD             reduce using rule 3 (factor -> NAT .)
    LT              reduce using rule 3 (factor -> NAT .)
    LE              reduce using rule 3 (factor -> NAT .)
    GT              reduce using rule 3 (factor -> NAT .)
    GE              reduce using rule 3 (factor -> NAT .)
    EQ              reduce using rule 3 (factor -> NAT .)
    NEQ             reduce using rule 3 (factor -> NAT .)
    ID              reduce using rule 3 (factor -> NAT .)
    NAT             reduce using rule 3 (factor -> NAT .)
    (               reduce using rule 3 (factor -> NAT .)
    LAMBDA          reduce using rule 3 (factor -> NAT .)
    REC             reduce using rule 3 (factor -> NAT .)
    $end            reduce using rule 3 (factor -> NAT .)
    )               reduce using rule 3 (factor -> NAT .)
    ELSE            reduce using rule 3 (factor -> NAT .)


state 9

    (7) factor -> LAMBDA . ( ID . expr )

    (               shift and go to state 27


state 10

    (8) factor -> REC . ID . LAMBDA ( ID . expr )

    ID              shift and go to state 28


state 11

    (6) expr -> expr factor .

    PLUS            reduce using rule 6 (expr -> expr factor .)
    MINUS           reduce using rule 6 (expr -> expr factor .)
    TIMES           reduce using rule 6 (expr -> expr factor .)
    DIVIDE          reduce using rule 6 (expr -> expr factor .)
    MOD             reduce using rule 6 (expr -> expr factor .)
    LT              reduce using rule 6 (expr -> expr factor .)
    LE              reduce using rule 6 (expr -> expr factor .)
    GT              reduce using rule 6 (expr -> expr factor .)
    GE              reduce using rule 6 (expr -> expr factor .)
    EQ              reduce using rule 6 (expr -> expr factor .)
    NEQ             reduce using rule 6 (expr -> expr factor .)
    ID              reduce using rule 6 (expr -> expr factor .)
    NAT             reduce using rule 6 (expr -> expr factor .)
    (               reduce using rule 6 (expr -> expr factor .)
    LAMBDA          reduce using rule 6 (expr -> expr factor .)
    REC             reduce using rule 6 (expr -> expr factor .)
    $end            reduce using rule 6 (expr -> expr factor .)
    )               reduce using rule 6 (expr -> expr factor .)
    ELSE            reduce using rule 6 (expr -> expr factor .)


state 12

    (9) expr -> expr PLUS . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 29
    factor                         shift and go to state 2

state 13

    (10) expr -> expr MINUS . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 30
    factor                         shift and go to state 2

state 14

    (11) expr -> expr TIMES . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 31
    factor                         shift and go to state 2

state 15

    (12) expr -> expr DIVIDE . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 32
    factor                         shift and go to state 2

state 16

    (13) expr -> expr MOD . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 33
    factor                         shift and go to state 2

state 17

    (14) expr -> expr LT . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 34
    factor                         shift and go to state 2

state 18

    (15) expr -> expr LE . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 35
    factor                         shift and go to state 2

state 19

    (16) expr -> expr GT . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 36
    factor                         shift and go to state 2

state 20

    (17) expr -> expr GE . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 37
    factor                         shift and go to state 2

state 21

    (18) expr -> expr EQ . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 38
    factor                         shift and go to state 2

state 22

    (19) expr -> expr NEQ . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 39
    factor                         shift and go to state 2

state 23

    (4) expr -> IF ( . expr ) THEN expr ELSE expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 40
    factor                         shift and go to state 2

state 24

    (5) factor -> ( expr . )
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    )               shift and go to state 41
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    GT              shift and go to state 19
    GE              shift and go to state 20
    EQ              shift and go to state 21
    NEQ             shift and go to state 22
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    factor                         shift and go to state 11

state 25

    (21) expr -> PLUS expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 21 (expr -> PLUS expr .)
    MINUS           reduce using rule 21 (expr -> PLUS expr .)
    TIMES           reduce using rule 21 (expr -> PLUS expr .)
    DIVIDE          reduce using rule 21 (expr -> PLUS expr .)
    MOD             reduce using rule 21 (expr -> PLUS expr .)
    LT              reduce using rule 21 (expr -> PLUS expr .)
    LE              reduce using rule 21 (expr -> PLUS expr .)
    GT              reduce using rule 21 (expr -> PLUS expr .)
    GE              reduce using rule 21 (expr -> PLUS expr .)
    EQ              reduce using rule 21 (expr -> PLUS expr .)
    NEQ             reduce using rule 21 (expr -> PLUS expr .)
    ID              reduce using rule 21 (expr -> PLUS expr .)
    NAT             reduce using rule 21 (expr -> PLUS expr .)
    LAMBDA          reduce using rule 21 (expr -> PLUS expr .)
    REC             reduce using rule 21 (expr -> PLUS expr .)
    $end            reduce using rule 21 (expr -> PLUS expr .)
    )               reduce using rule 21 (expr -> PLUS expr .)
    ELSE            reduce using rule 21 (expr -> PLUS expr .)
    (               shift and go to state 4

  ! (               [ reduce using rule 21 (expr -> PLUS expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 26

    (20) expr -> MINUS expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 20 (expr -> MINUS expr .)
    MINUS           reduce using rule 20 (expr -> MINUS expr .)
    TIMES           reduce using rule 20 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 20 (expr -> MINUS expr .)
    MOD             reduce using rule 20 (expr -> MINUS expr .)
    LT              reduce using rule 20 (expr -> MINUS expr .)
    LE              reduce using rule 20 (expr -> MINUS expr .)
    GT              reduce using rule 20 (expr -> MINUS expr .)
    GE              reduce using rule 20 (expr -> MINUS expr .)
    EQ              reduce using rule 20 (expr -> MINUS expr .)
    NEQ             reduce using rule 20 (expr -> MINUS expr .)
    ID              reduce using rule 20 (expr -> MINUS expr .)
    NAT             reduce using rule 20 (expr -> MINUS expr .)
    LAMBDA          reduce using rule 20 (expr -> MINUS expr .)
    REC             reduce using rule 20 (expr -> MINUS expr .)
    $end            reduce using rule 20 (expr -> MINUS expr .)
    )               reduce using rule 20 (expr -> MINUS expr .)
    ELSE            reduce using rule 20 (expr -> MINUS expr .)
    (               shift and go to state 4

  ! (               [ reduce using rule 20 (expr -> MINUS expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 27

    (7) factor -> LAMBDA ( . ID . expr )

    ID              shift and go to state 42


state 28

    (8) factor -> REC ID . . LAMBDA ( ID . expr )

    .               shift and go to state 43


state 29

    (9) expr -> expr PLUS expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 9 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 9 (expr -> expr PLUS expr .)
    LT              reduce using rule 9 (expr -> expr PLUS expr .)
    LE              reduce using rule 9 (expr -> expr PLUS expr .)
    GT              reduce using rule 9 (expr -> expr PLUS expr .)
    GE              reduce using rule 9 (expr -> expr PLUS expr .)
    EQ              reduce using rule 9 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 9 (expr -> expr PLUS expr .)
    ID              reduce using rule 9 (expr -> expr PLUS expr .)
    NAT             reduce using rule 9 (expr -> expr PLUS expr .)
    LAMBDA          reduce using rule 9 (expr -> expr PLUS expr .)
    REC             reduce using rule 9 (expr -> expr PLUS expr .)
    $end            reduce using rule 9 (expr -> expr PLUS expr .)
    )               reduce using rule 9 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 9 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! TIMES           [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! (               [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 30

    (10) expr -> expr MINUS expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 10 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 10 (expr -> expr MINUS expr .)
    LT              reduce using rule 10 (expr -> expr MINUS expr .)
    LE              reduce using rule 10 (expr -> expr MINUS expr .)
    GT              reduce using rule 10 (expr -> expr MINUS expr .)
    GE              reduce using rule 10 (expr -> expr MINUS expr .)
    EQ              reduce using rule 10 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 10 (expr -> expr MINUS expr .)
    ID              reduce using rule 10 (expr -> expr MINUS expr .)
    NAT             reduce using rule 10 (expr -> expr MINUS expr .)
    LAMBDA          reduce using rule 10 (expr -> expr MINUS expr .)
    REC             reduce using rule 10 (expr -> expr MINUS expr .)
    $end            reduce using rule 10 (expr -> expr MINUS expr .)
    )               reduce using rule 10 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 10 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! TIMES           [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! (               [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 31

    (11) expr -> expr TIMES expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 11 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 11 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 11 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 11 (expr -> expr TIMES expr .)
    MOD             reduce using rule 11 (expr -> expr TIMES expr .)
    LT              reduce using rule 11 (expr -> expr TIMES expr .)
    LE              reduce using rule 11 (expr -> expr TIMES expr .)
    GT              reduce using rule 11 (expr -> expr TIMES expr .)
    GE              reduce using rule 11 (expr -> expr TIMES expr .)
    EQ              reduce using rule 11 (expr -> expr TIMES expr .)
    NEQ             reduce using rule 11 (expr -> expr TIMES expr .)
    ID              reduce using rule 11 (expr -> expr TIMES expr .)
    NAT             reduce using rule 11 (expr -> expr TIMES expr .)
    LAMBDA          reduce using rule 11 (expr -> expr TIMES expr .)
    REC             reduce using rule 11 (expr -> expr TIMES expr .)
    $end            reduce using rule 11 (expr -> expr TIMES expr .)
    )               reduce using rule 11 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 11 (expr -> expr TIMES expr .)
    (               shift and go to state 4

  ! (               [ reduce using rule 11 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 32

    (12) expr -> expr DIVIDE expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 12 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 12 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 12 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 12 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 12 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 12 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 12 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 12 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 12 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 12 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 12 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 12 (expr -> expr DIVIDE expr .)
    NAT             reduce using rule 12 (expr -> expr DIVIDE expr .)
    LAMBDA          reduce using rule 12 (expr -> expr DIVIDE expr .)
    REC             reduce using rule 12 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 12 (expr -> expr DIVIDE expr .)
    )               reduce using rule 12 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 12 (expr -> expr DIVIDE expr .)
    (               shift and go to state 4

  ! (               [ reduce using rule 12 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 33

    (13) expr -> expr MOD expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 13 (expr -> expr MOD expr .)
    MINUS           reduce using rule 13 (expr -> expr MOD expr .)
    TIMES           reduce using rule 13 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 13 (expr -> expr MOD expr .)
    MOD             reduce using rule 13 (expr -> expr MOD expr .)
    LT              reduce using rule 13 (expr -> expr MOD expr .)
    LE              reduce using rule 13 (expr -> expr MOD expr .)
    GT              reduce using rule 13 (expr -> expr MOD expr .)
    GE              reduce using rule 13 (expr -> expr MOD expr .)
    EQ              reduce using rule 13 (expr -> expr MOD expr .)
    NEQ             reduce using rule 13 (expr -> expr MOD expr .)
    ID              reduce using rule 13 (expr -> expr MOD expr .)
    NAT             reduce using rule 13 (expr -> expr MOD expr .)
    LAMBDA          reduce using rule 13 (expr -> expr MOD expr .)
    REC             reduce using rule 13 (expr -> expr MOD expr .)
    $end            reduce using rule 13 (expr -> expr MOD expr .)
    )               reduce using rule 13 (expr -> expr MOD expr .)
    ELSE            reduce using rule 13 (expr -> expr MOD expr .)
    (               shift and go to state 4

  ! (               [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 34

    (14) expr -> expr LT expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    LT              reduce using rule 14 (expr -> expr LT expr .)
    LE              reduce using rule 14 (expr -> expr LT expr .)
    GT              reduce using rule 14 (expr -> expr LT expr .)
    GE              reduce using rule 14 (expr -> expr LT expr .)
    EQ              reduce using rule 14 (expr -> expr LT expr .)
    NEQ             reduce using rule 14 (expr -> expr LT expr .)
    ID              reduce using rule 14 (expr -> expr LT expr .)
    NAT             reduce using rule 14 (expr -> expr LT expr .)
    LAMBDA          reduce using rule 14 (expr -> expr LT expr .)
    REC             reduce using rule 14 (expr -> expr LT expr .)
    $end            reduce using rule 14 (expr -> expr LT expr .)
    )               reduce using rule 14 (expr -> expr LT expr .)
    ELSE            reduce using rule 14 (expr -> expr LT expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! PLUS            [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! (               [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 35

    (15) expr -> expr LE expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    LT              reduce using rule 15 (expr -> expr LE expr .)
    LE              reduce using rule 15 (expr -> expr LE expr .)
    GT              reduce using rule 15 (expr -> expr LE expr .)
    GE              reduce using rule 15 (expr -> expr LE expr .)
    EQ              reduce using rule 15 (expr -> expr LE expr .)
    NEQ             reduce using rule 15 (expr -> expr LE expr .)
    ID              reduce using rule 15 (expr -> expr LE expr .)
    NAT             reduce using rule 15 (expr -> expr LE expr .)
    LAMBDA          reduce using rule 15 (expr -> expr LE expr .)
    REC             reduce using rule 15 (expr -> expr LE expr .)
    $end            reduce using rule 15 (expr -> expr LE expr .)
    )               reduce using rule 15 (expr -> expr LE expr .)
    ELSE            reduce using rule 15 (expr -> expr LE expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! PLUS            [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! (               [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 36

    (16) expr -> expr GT expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    LT              reduce using rule 16 (expr -> expr GT expr .)
    LE              reduce using rule 16 (expr -> expr GT expr .)
    GT              reduce using rule 16 (expr -> expr GT expr .)
    GE              reduce using rule 16 (expr -> expr GT expr .)
    EQ              reduce using rule 16 (expr -> expr GT expr .)
    NEQ             reduce using rule 16 (expr -> expr GT expr .)
    ID              reduce using rule 16 (expr -> expr GT expr .)
    NAT             reduce using rule 16 (expr -> expr GT expr .)
    LAMBDA          reduce using rule 16 (expr -> expr GT expr .)
    REC             reduce using rule 16 (expr -> expr GT expr .)
    $end            reduce using rule 16 (expr -> expr GT expr .)
    )               reduce using rule 16 (expr -> expr GT expr .)
    ELSE            reduce using rule 16 (expr -> expr GT expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! PLUS            [ reduce using rule 16 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr GT expr .) ]
  ! (               [ reduce using rule 16 (expr -> expr GT expr .) ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 37

    (17) expr -> expr GE expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    LT              reduce using rule 17 (expr -> expr GE expr .)
    LE              reduce using rule 17 (expr -> expr GE expr .)
    GT              reduce using rule 17 (expr -> expr GE expr .)
    GE              reduce using rule 17 (expr -> expr GE expr .)
    EQ              reduce using rule 17 (expr -> expr GE expr .)
    NEQ             reduce using rule 17 (expr -> expr GE expr .)
    ID              reduce using rule 17 (expr -> expr GE expr .)
    NAT             reduce using rule 17 (expr -> expr GE expr .)
    LAMBDA          reduce using rule 17 (expr -> expr GE expr .)
    REC             reduce using rule 17 (expr -> expr GE expr .)
    $end            reduce using rule 17 (expr -> expr GE expr .)
    )               reduce using rule 17 (expr -> expr GE expr .)
    ELSE            reduce using rule 17 (expr -> expr GE expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! PLUS            [ reduce using rule 17 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 17 (expr -> expr GE expr .) ]
  ! (               [ reduce using rule 17 (expr -> expr GE expr .) ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 38

    (18) expr -> expr EQ expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    LT              reduce using rule 18 (expr -> expr EQ expr .)
    LE              reduce using rule 18 (expr -> expr EQ expr .)
    GT              reduce using rule 18 (expr -> expr EQ expr .)
    GE              reduce using rule 18 (expr -> expr EQ expr .)
    EQ              reduce using rule 18 (expr -> expr EQ expr .)
    NEQ             reduce using rule 18 (expr -> expr EQ expr .)
    ID              reduce using rule 18 (expr -> expr EQ expr .)
    NAT             reduce using rule 18 (expr -> expr EQ expr .)
    LAMBDA          reduce using rule 18 (expr -> expr EQ expr .)
    REC             reduce using rule 18 (expr -> expr EQ expr .)
    $end            reduce using rule 18 (expr -> expr EQ expr .)
    )               reduce using rule 18 (expr -> expr EQ expr .)
    ELSE            reduce using rule 18 (expr -> expr EQ expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! PLUS            [ reduce using rule 18 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 18 (expr -> expr EQ expr .) ]
  ! (               [ reduce using rule 18 (expr -> expr EQ expr .) ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 39

    (19) expr -> expr NEQ expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    LT              reduce using rule 19 (expr -> expr NEQ expr .)
    LE              reduce using rule 19 (expr -> expr NEQ expr .)
    GT              reduce using rule 19 (expr -> expr NEQ expr .)
    GE              reduce using rule 19 (expr -> expr NEQ expr .)
    EQ              reduce using rule 19 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 19 (expr -> expr NEQ expr .)
    ID              reduce using rule 19 (expr -> expr NEQ expr .)
    NAT             reduce using rule 19 (expr -> expr NEQ expr .)
    LAMBDA          reduce using rule 19 (expr -> expr NEQ expr .)
    REC             reduce using rule 19 (expr -> expr NEQ expr .)
    $end            reduce using rule 19 (expr -> expr NEQ expr .)
    )               reduce using rule 19 (expr -> expr NEQ expr .)
    ELSE            reduce using rule 19 (expr -> expr NEQ expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    (               shift and go to state 4

  ! PLUS            [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! MOD             [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! (               [ reduce using rule 19 (expr -> expr NEQ expr .) ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 40

    (4) expr -> IF ( expr . ) THEN expr ELSE expr
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    )               shift and go to state 44
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    GT              shift and go to state 19
    GE              shift and go to state 20
    EQ              shift and go to state 21
    NEQ             shift and go to state 22
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    factor                         shift and go to state 11

state 41

    (5) factor -> ( expr ) .

    PLUS            reduce using rule 5 (factor -> ( expr ) .)
    MINUS           reduce using rule 5 (factor -> ( expr ) .)
    TIMES           reduce using rule 5 (factor -> ( expr ) .)
    DIVIDE          reduce using rule 5 (factor -> ( expr ) .)
    MOD             reduce using rule 5 (factor -> ( expr ) .)
    LT              reduce using rule 5 (factor -> ( expr ) .)
    LE              reduce using rule 5 (factor -> ( expr ) .)
    GT              reduce using rule 5 (factor -> ( expr ) .)
    GE              reduce using rule 5 (factor -> ( expr ) .)
    EQ              reduce using rule 5 (factor -> ( expr ) .)
    NEQ             reduce using rule 5 (factor -> ( expr ) .)
    ID              reduce using rule 5 (factor -> ( expr ) .)
    NAT             reduce using rule 5 (factor -> ( expr ) .)
    (               reduce using rule 5 (factor -> ( expr ) .)
    LAMBDA          reduce using rule 5 (factor -> ( expr ) .)
    REC             reduce using rule 5 (factor -> ( expr ) .)
    $end            reduce using rule 5 (factor -> ( expr ) .)
    )               reduce using rule 5 (factor -> ( expr ) .)
    ELSE            reduce using rule 5 (factor -> ( expr ) .)


state 42

    (7) factor -> LAMBDA ( ID . . expr )

    .               shift and go to state 45


state 43

    (8) factor -> REC ID . . LAMBDA ( ID . expr )

    LAMBDA          shift and go to state 46


state 44

    (4) expr -> IF ( expr ) . THEN expr ELSE expr

    THEN            shift and go to state 47


state 45

    (7) factor -> LAMBDA ( ID . . expr )
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 48
    factor                         shift and go to state 2

state 46

    (8) factor -> REC ID . LAMBDA . ( ID . expr )

    (               shift and go to state 49


state 47

    (4) expr -> IF ( expr ) THEN . expr ELSE expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 50
    factor                         shift and go to state 2

state 48

    (7) factor -> LAMBDA ( ID . expr . )
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    )               shift and go to state 51
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    GT              shift and go to state 19
    GE              shift and go to state 20
    EQ              shift and go to state 21
    NEQ             shift and go to state 22
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    factor                         shift and go to state 11

state 49

    (8) factor -> REC ID . LAMBDA ( . ID . expr )

    ID              shift and go to state 52


state 50

    (4) expr -> IF ( expr ) THEN expr . ELSE expr
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    ELSE            shift and go to state 53
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    GT              shift and go to state 19
    GE              shift and go to state 20
    EQ              shift and go to state 21
    NEQ             shift and go to state 22
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    factor                         shift and go to state 11

state 51

    (7) factor -> LAMBDA ( ID . expr ) .

    PLUS            reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    MINUS           reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    TIMES           reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    DIVIDE          reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    MOD             reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    LT              reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    LE              reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    GT              reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    GE              reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    EQ              reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    NEQ             reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    ID              reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    NAT             reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    (               reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    LAMBDA          reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    REC             reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    $end            reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    )               reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)
    ELSE            reduce using rule 7 (factor -> LAMBDA ( ID . expr ) .)


state 52

    (8) factor -> REC ID . LAMBDA ( ID . . expr )

    .               shift and go to state 54


state 53

    (4) expr -> IF ( expr ) THEN expr ELSE . expr
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 55
    factor                         shift and go to state 2

state 54

    (8) factor -> REC ID . LAMBDA ( ID . . expr )
    (1) expr -> . factor
    (4) expr -> . IF ( expr ) THEN expr ELSE expr
    (6) expr -> . expr factor
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . expr TIMES expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr GT expr
    (17) expr -> . expr GE expr
    (18) expr -> . expr EQ expr
    (19) expr -> . expr NEQ expr
    (20) expr -> . MINUS expr
    (21) expr -> . PLUS expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    IF              shift and go to state 3
    MINUS           shift and go to state 6
    PLUS            shift and go to state 5
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    expr                           shift and go to state 56
    factor                         shift and go to state 2

state 55

    (4) expr -> IF ( expr ) THEN expr ELSE expr .
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    PLUS            reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    MINUS           reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    TIMES           reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    DIVIDE          reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    MOD             reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    LT              reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    LE              reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    GT              reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    GE              reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    EQ              reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    NEQ             reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    ID              reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    NAT             reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    LAMBDA          reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    REC             reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    $end            reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    )               reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    ELSE            reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .)
    (               shift and go to state 4

  ! (               [ reduce using rule 4 (expr -> IF ( expr ) THEN expr ELSE expr .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! LT              [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GT              [ shift and go to state 19 ]
  ! GE              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 21 ]
  ! NEQ             [ shift and go to state 22 ]
  ! ID              [ shift and go to state 7 ]
  ! NAT             [ shift and go to state 8 ]
  ! LAMBDA          [ shift and go to state 9 ]
  ! REC             [ shift and go to state 10 ]

    factor                         shift and go to state 11

state 56

    (8) factor -> REC ID . LAMBDA ( ID . expr . )
    (6) expr -> expr . factor
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (11) expr -> expr . TIMES expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . GT expr
    (17) expr -> expr . GE expr
    (18) expr -> expr . EQ expr
    (19) expr -> expr . NEQ expr
    (2) factor -> . ID
    (3) factor -> . NAT
    (5) factor -> . ( expr )
    (7) factor -> . LAMBDA ( ID . expr )
    (8) factor -> . REC ID . LAMBDA ( ID . expr )

    )               shift and go to state 57
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    GT              shift and go to state 19
    GE              shift and go to state 20
    EQ              shift and go to state 21
    NEQ             shift and go to state 22
    ID              shift and go to state 7
    NAT             shift and go to state 8
    (               shift and go to state 4
    LAMBDA          shift and go to state 9
    REC             shift and go to state 10

    factor                         shift and go to state 11

state 57

    (8) factor -> REC ID . LAMBDA ( ID . expr ) .

    PLUS            reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    MINUS           reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    TIMES           reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    DIVIDE          reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    MOD             reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    LT              reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    LE              reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    GT              reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    GE              reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    EQ              reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    NEQ             reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    ID              reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    NAT             reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    (               reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    LAMBDA          reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    REC             reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    $end            reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    )               reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)
    ELSE            reduce using rule 8 (factor -> REC ID . LAMBDA ( ID . expr ) .)

