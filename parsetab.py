
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEMODleftTHENleftELSErightUPLUSUMINUSleft()DIVIDE ELSE EQ GE GT ID IF LAMBDA LE LT MINUS MOD NAT NEQ PLUS REC THEN TIMES\n    expr : ID\n    \n    expr : NAT\n    \n    expr : IF '(' expr ')' THEN expr ELSE expr\n    \n    expr : '(' expr ')'\n    \n    expr : '(' expr ')' expr\n    \n    expr : LAMBDA '(' ID '.' expr ')'\n    \n    expr : REC ID '.' LAMBDA '(' ID '.' expr ')'\n    \n    expr : expr PLUS expr\n          | expr MINUS expr\n          | expr TIMES expr\n          | expr DIVIDE expr\n          | expr MOD expr\n    \n    expr  : expr LT expr\n          | expr LE expr\n          | expr GT expr\n          | expr GE expr\n          | expr EQ expr\n          | expr NEQ expr\n    expr : MINUS expr %prec UMINUSexpr : PLUS expr %prec UPLUS"
    
_lr_action_items = {'ID':([0,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,39,44,46,48,52,53,],[2,2,24,2,2,2,2,2,2,2,2,2,2,2,2,2,2,40,2,2,2,51,2,2,]),'NAT':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,44,46,52,53,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'IF':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,44,46,52,53,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'(':([0,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,44,45,46,52,53,],[5,21,5,23,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,48,5,5,5,]),'LAMBDA':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,41,44,46,52,53,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,45,6,6,6,6,]),'REC':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,44,46,52,53,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'MINUS':([0,1,2,3,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,46,47,49,50,52,53,54,55,56,],[9,11,-1,-2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,-20,-19,-8,-9,-10,-11,-12,11,11,11,11,11,11,11,-4,-5,9,9,11,11,-6,9,9,-3,11,-7,]),'PLUS':([0,1,2,3,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,46,47,49,50,52,53,54,55,56,],[8,10,-1,-2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,-20,-19,-8,-9,-10,-11,-12,10,10,10,10,10,10,10,-4,-5,8,8,10,10,-6,8,8,-3,10,-7,]),'$end':([1,2,3,25,26,27,28,29,30,31,32,33,34,35,36,37,39,43,50,54,56,],[0,-1,-2,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-4,-5,-6,-3,-7,]),'TIMES':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[12,-1,-2,12,-20,-19,12,12,-10,-11,-12,12,12,12,12,12,12,12,-4,-5,12,12,-6,-3,12,-7,]),'DIVIDE':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[13,-1,-2,13,-20,-19,13,13,-10,-11,-12,13,13,13,13,13,13,13,-4,-5,13,13,-6,-3,13,-7,]),'MOD':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[14,-1,-2,14,-20,-19,14,14,-10,-11,-12,14,14,14,14,14,14,14,-4,-5,14,14,-6,-3,14,-7,]),'LT':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[15,-1,-2,15,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,15,-4,-5,15,15,-6,-3,15,-7,]),'LE':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[16,-1,-2,16,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,16,-4,-5,16,16,-6,-3,16,-7,]),'GT':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[17,-1,-2,17,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,17,-4,-5,17,17,-6,-3,17,-7,]),'GE':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[18,-1,-2,18,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,18,-4,-5,18,18,-6,-3,18,-7,]),'EQ':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[19,-1,-2,19,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,19,-4,-5,19,19,-6,-3,19,-7,]),'NEQ':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,49,50,54,55,56,],[20,-1,-2,20,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,20,-4,-5,20,20,-6,-3,20,-7,]),')':([2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,47,50,54,55,56,],[-1,-2,39,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,42,-4,-5,50,-6,-3,56,-7,]),'ELSE':([2,3,25,26,27,28,29,30,31,32,33,34,35,36,37,39,43,49,50,54,56,],[-1,-2,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-4,-5,52,-6,-3,-7,]),'.':([24,40,51,],[41,44,53,]),'THEN':([42,],[46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,44,46,52,53,],[1,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,47,49,54,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> ID','expr',1,'p_expr_ID','my_parser.py',46),
  ('expr -> NAT','expr',1,'p_expr_NAT','my_parser.py',53),
  ('expr -> IF ( expr ) THEN expr ELSE expr','expr',8,'p_expr_if','my_parser.py',60),
  ('expr -> ( expr )','expr',3,'p_expr_paren','my_parser.py',67),
  ('expr -> ( expr ) expr','expr',4,'p_expr_function_app','my_parser.py',74),
  ('expr -> LAMBDA ( ID . expr )','expr',6,'p_expr_function_abs_normal','my_parser.py',81),
  ('expr -> REC ID . LAMBDA ( ID . expr )','expr',9,'p_expr_function_abs_rec','my_parser.py',88),
  ('expr -> expr PLUS expr','expr',3,'p_expr_arith','my_parser.py',95),
  ('expr -> expr MINUS expr','expr',3,'p_expr_arith','my_parser.py',96),
  ('expr -> expr TIMES expr','expr',3,'p_expr_arith','my_parser.py',97),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_arith','my_parser.py',98),
  ('expr -> expr MOD expr','expr',3,'p_expr_arith','my_parser.py',99),
  ('expr -> expr LT expr','expr',3,'p_expr_comparisons','my_parser.py',116),
  ('expr -> expr LE expr','expr',3,'p_expr_comparisons','my_parser.py',117),
  ('expr -> expr GT expr','expr',3,'p_expr_comparisons','my_parser.py',118),
  ('expr -> expr GE expr','expr',3,'p_expr_comparisons','my_parser.py',119),
  ('expr -> expr EQ expr','expr',3,'p_expr_comparisons','my_parser.py',120),
  ('expr -> expr NEQ expr','expr',3,'p_expr_comparisons','my_parser.py',121),
  ('expr -> MINUS expr','expr',2,'p_expr_UMINUS','my_parser.py',127),
  ('expr -> PLUS expr','expr',2,'p_expr_UPLUS','my_parser.py',132),
]
