
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEMODleftTHENleftELSErightUPLUSUMINUSleft()rightLAMBDArightRECDIVIDE ELSE EQ GE GT ID IF LAMBDA LE LT MINUS MOD NAT NEQ PLUS REC THEN TIMES\n    expr : ID\n    \n    expr : NAT\n    \n    expr : IF '(' expr ')' THEN expr ELSE expr\n    \n    expr : '(' expr ')'\n    \n    expr : LAMBDA ID '.' expr '(' expr ')'\n    \n    expr : LAMBDA '('  ID '.' expr ')'\n    \n    expr : REC ID '.' LAMBDA ID '.' expr\n    \n    expr : expr PLUS expr\n          | expr MINUS expr\n          | expr TIMES expr\n          | expr DIVIDE expr\n          | expr MOD expr\n    \n    expr  : expr LT expr\n          | expr LE expr\n          | expr GT expr\n          | expr GE expr\n          | expr EQ expr\n          | expr NEQ expr\n    expr : MINUS expr %prec UMINUSexpr : PLUS expr %prec UPLUS"
    
_lr_action_items = {'ID':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,41,46,47,48,49,55,56,],[2,2,23,25,2,2,2,2,2,2,2,2,2,2,2,2,2,2,42,2,2,51,2,2,2,2,]),'NAT':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,41,46,48,49,55,56,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'IF':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,41,46,48,49,55,56,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'(':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,45,46,48,49,54,55,56,57,58,59,],[5,-1,-2,21,5,24,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-4,5,49,5,5,5,-6,5,5,-5,-7,-3,]),'LAMBDA':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,41,43,46,48,49,55,56,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,47,6,6,6,6,6,]),'REC':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,41,46,48,49,55,56,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'MINUS':([0,1,2,3,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,48,49,50,52,53,54,55,56,57,58,59,],[9,11,-1,-2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,-20,-19,-8,-9,-10,-11,-12,11,11,11,11,11,11,11,-4,9,11,9,9,9,11,11,11,-6,9,9,-5,11,-3,]),'PLUS':([0,1,2,3,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,48,49,50,52,53,54,55,56,57,58,59,],[8,10,-1,-2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,-20,-19,-8,-9,-10,-11,-12,10,10,10,10,10,10,10,-4,8,10,8,8,8,10,10,10,-6,8,8,-5,10,-3,]),'$end':([1,2,3,26,27,28,29,30,31,32,33,34,35,36,37,38,40,54,57,58,59,],[0,-1,-2,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-4,-6,-5,-7,-3,]),'TIMES':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[12,-1,-2,12,-20,-19,12,12,-10,-11,-12,12,12,12,12,12,12,12,-4,12,12,12,12,-6,-5,12,-3,]),'DIVIDE':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[13,-1,-2,13,-20,-19,13,13,-10,-11,-12,13,13,13,13,13,13,13,-4,13,13,13,13,-6,-5,13,-3,]),'MOD':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[14,-1,-2,14,-20,-19,14,14,-10,-11,-12,14,14,14,14,14,14,14,-4,14,14,14,14,-6,-5,14,-3,]),'LT':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[15,-1,-2,15,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,15,-4,15,15,15,15,-6,-5,15,-3,]),'LE':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[16,-1,-2,16,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,16,-4,16,16,16,16,-6,-5,16,-3,]),'GT':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[17,-1,-2,17,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,17,-4,17,17,17,17,-6,-5,17,-3,]),'GE':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[18,-1,-2,18,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,18,-4,18,18,18,18,-6,-5,18,-3,]),'EQ':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[19,-1,-2,19,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,19,-4,19,19,19,19,-6,-5,19,-3,]),'NEQ':([1,2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,52,53,54,57,58,59,],[20,-1,-2,20,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,20,-4,20,20,20,20,-6,-5,20,-3,]),')':([2,3,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,53,54,57,58,59,],[-1,-2,40,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,44,-4,54,57,-6,-5,-7,-3,]),'ELSE':([2,3,26,27,28,29,30,31,32,33,34,35,36,37,38,40,52,54,57,58,59,],[-1,-2,-20,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-4,56,-6,-5,-7,-3,]),'.':([23,25,42,51,],[41,43,46,55,]),'THEN':([44,],[48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,41,46,48,49,55,56,],[1,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,50,52,53,58,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> ID','expr',1,'p_expr_ID','yacc.py',42),
  ('expr -> NAT','expr',1,'p_expr_NAT','yacc.py',49),
  ('expr -> IF ( expr ) THEN expr ELSE expr','expr',8,'p_expr_if','yacc.py',56),
  ('expr -> ( expr )','expr',3,'p_expr_paren','yacc.py',67),
  ('expr -> LAMBDA ID . expr ( expr )','expr',7,'p_expr_function_app','yacc.py',74),
  ('expr -> LAMBDA ( ID . expr )','expr',6,'p_expr_function_abs','yacc.py',81),
  ('expr -> REC ID . LAMBDA ID . expr','expr',7,'p_expr_recursive','yacc.py',88),
  ('expr -> expr PLUS expr','expr',3,'p_expr_arith','yacc.py',95),
  ('expr -> expr MINUS expr','expr',3,'p_expr_arith','yacc.py',96),
  ('expr -> expr TIMES expr','expr',3,'p_expr_arith','yacc.py',97),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_arith','yacc.py',98),
  ('expr -> expr MOD expr','expr',3,'p_expr_arith','yacc.py',99),
  ('expr -> expr LT expr','expr',3,'p_expr_comparisons','yacc.py',118),
  ('expr -> expr LE expr','expr',3,'p_expr_comparisons','yacc.py',119),
  ('expr -> expr GT expr','expr',3,'p_expr_comparisons','yacc.py',120),
  ('expr -> expr GE expr','expr',3,'p_expr_comparisons','yacc.py',121),
  ('expr -> expr EQ expr','expr',3,'p_expr_comparisons','yacc.py',122),
  ('expr -> expr NEQ expr','expr',3,'p_expr_comparisons','yacc.py',123),
  ('expr -> MINUS expr','expr',2,'p_expr_UMINUS','yacc.py',140),
  ('expr -> PLUS expr','expr',2,'p_expr_UPLUS','yacc.py',145),
]
