
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEMODleftTHENleftELSErightUPLUSUMINUSleft()rightLAMBDArightRECDIVIDE ELSE EQ GE GT ID IF LAMBDA LE LT MINUS MOD NAT NEQ PLUS REC THEN TIMES\n    expr : IF '(' expr ')' THEN expr ELSE expr\n         | IF '(' expr ')' THEN expr\n    \n    expr : '(' expr ')'\n    \n    expr : LAMBDA ID '.' expr '(' expr ')'\n    \n    expr : LAMBDA ID '.' expr\n    \n    expr : REC ID '.' LAMBDA ID '.' expr\n    \n    expr : expr PLUS expr\n          | expr MINUS expr\n          | expr TIMES expr\n          | expr DIVIDE expr\n          | expr MOD expr\n    \n    expr  : expr LT expr\n          | expr LE expr\n          | expr GT expr\n          | expr GE expr\n          | expr EQ expr\n          | expr NEQ expr\n    expr : MINUS expr %prec UMINUSexpr : PLUS expr %prec UPLUS\n    expr : NAT\n    \n    expr : ID\n    "
    
_lr_action_items = {'IF':([0,3,7,8,10,11,12,13,14,15,16,17,18,19,20,21,40,45,46,50,51,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'(':([0,2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,43,45,46,48,50,51,52,53,54,],[3,21,3,-21,3,3,-20,3,3,3,3,3,3,3,3,3,3,3,3,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-3,3,46,3,3,-2,3,3,-4,-6,-1,]),'LAMBDA':([0,3,7,8,10,11,12,13,14,15,16,17,18,19,20,21,40,41,45,46,50,51,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,44,4,4,4,4,]),'REC':([0,3,7,8,10,11,12,13,14,15,16,17,18,19,20,21,40,45,46,50,51,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'MINUS':([0,1,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,45,46,48,49,50,51,52,53,54,],[8,11,8,-21,8,8,-20,8,8,8,8,8,8,8,8,8,8,8,8,11,-19,-18,-7,-8,-9,-10,-11,11,11,11,11,11,11,11,-3,8,11,8,8,-2,11,8,8,-4,11,-1,]),'PLUS':([0,1,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,45,46,48,49,50,51,52,53,54,],[7,10,7,-21,7,7,-20,7,7,7,7,7,7,7,7,7,7,7,7,10,-19,-18,-7,-8,-9,-10,-11,10,10,10,10,10,10,10,-3,7,10,7,7,-2,10,7,7,-4,10,-1,]),'NAT':([0,3,7,8,10,11,12,13,14,15,16,17,18,19,20,21,40,45,46,50,51,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'ID':([0,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,40,44,45,46,50,51,],[5,5,23,24,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,47,5,5,5,5,]),'$end':([1,5,9,25,26,27,28,29,30,31,32,33,34,35,36,37,39,43,48,52,53,54,],[0,-21,-20,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-3,-5,-2,-4,-6,-1,]),'TIMES':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[12,-21,-20,12,-19,-18,12,12,-9,-10,-11,12,12,12,12,12,12,12,-3,12,-2,12,-4,12,-1,]),'DIVIDE':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[13,-21,-20,13,-19,-18,13,13,-9,-10,-11,13,13,13,13,13,13,13,-3,13,-2,13,-4,13,-1,]),'MOD':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[14,-21,-20,14,-19,-18,14,14,-9,-10,-11,14,14,14,14,14,14,14,-3,14,-2,14,-4,14,-1,]),'LT':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[15,-21,-20,15,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,15,-3,15,-2,15,-4,15,-1,]),'LE':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[16,-21,-20,16,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,16,-3,16,-2,16,-4,16,-1,]),'GT':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[17,-21,-20,17,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,17,-3,17,-2,17,-4,17,-1,]),'GE':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[18,-21,-20,18,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,18,-3,18,-2,18,-4,18,-1,]),'EQ':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[19,-21,-20,19,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,19,-3,19,-2,19,-4,19,-1,]),'NEQ':([1,5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[20,-21,-20,20,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,20,-3,20,-2,20,-4,20,-1,]),')':([5,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,52,53,54,],[-21,-20,39,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,42,-3,-5,-2,52,-4,-6,-1,]),'ELSE':([5,9,25,26,27,28,29,30,31,32,33,34,35,36,37,39,43,48,52,53,54,],[-21,-20,-19,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-3,-5,51,-4,-6,-1,]),'.':([23,24,47,],[40,41,50,]),'THEN':([42,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,3,7,8,10,11,12,13,14,15,16,17,18,19,20,21,40,45,46,50,51,],[1,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,48,49,53,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> IF ( expr ) THEN expr ELSE expr','expr',8,'p_expr_if','yacc.py',40),
  ('expr -> IF ( expr ) THEN expr','expr',6,'p_expr_if','yacc.py',41),
  ('expr -> ( expr )','expr',3,'p_expr_paren','yacc.py',48),
  ('expr -> LAMBDA ID . expr ( expr )','expr',7,'p_expr_function_app','yacc.py',55),
  ('expr -> LAMBDA ID . expr','expr',4,'p_expr_function_abs','yacc.py',62),
  ('expr -> REC ID . LAMBDA ID . expr','expr',7,'p_expr_recursive','yacc.py',69),
  ('expr -> expr PLUS expr','expr',3,'p_expr_arith','yacc.py',76),
  ('expr -> expr MINUS expr','expr',3,'p_expr_arith','yacc.py',77),
  ('expr -> expr TIMES expr','expr',3,'p_expr_arith','yacc.py',78),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_arith','yacc.py',79),
  ('expr -> expr MOD expr','expr',3,'p_expr_arith','yacc.py',80),
  ('expr -> expr LT expr','expr',3,'p_expr_comparisons','yacc.py',99),
  ('expr -> expr LE expr','expr',3,'p_expr_comparisons','yacc.py',100),
  ('expr -> expr GT expr','expr',3,'p_expr_comparisons','yacc.py',101),
  ('expr -> expr GE expr','expr',3,'p_expr_comparisons','yacc.py',102),
  ('expr -> expr EQ expr','expr',3,'p_expr_comparisons','yacc.py',103),
  ('expr -> expr NEQ expr','expr',3,'p_expr_comparisons','yacc.py',104),
  ('expr -> MINUS expr','expr',2,'p_expr_UMINUS','yacc.py',121),
  ('expr -> PLUS expr','expr',2,'p_expr_UPLUS','yacc.py',126),
  ('expr -> NAT','expr',1,'p_expr_NAT','yacc.py',132),
  ('expr -> ID','expr',1,'p_expr_ID','yacc.py',139),
]
