
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEMODleftTHENleftELSErightUPLUSUMINUSleft()DIVIDE ELSE EQ GE GT ID IF LAMBDA LE LT MINUS MOD NAT NEQ PLUS REC THEN TIMES\n    expr : ID\n    \n    expr : NAT\n    \n    expr : IF '(' expr ')' THEN expr ELSE expr\n    \n    expr : '(' expr ')'\n    \n    expr : '(' expr ')' expr\n    \n    expr : REC ID '.' LAMBDA '(' ID '.' expr ')' expr\n    \n    expr : LAMBDA '(' ID '.' expr ')'\n    \n    expr : REC ID '.' LAMBDA '(' ID '.' expr ')'\n    \n    expr : expr PLUS expr\n          | expr MINUS expr\n          | expr TIMES expr\n          | expr DIVIDE expr\n          | expr MOD expr\n    \n    expr  : expr LT expr\n          | expr LE expr\n          | expr GT expr\n          | expr GE expr\n          | expr EQ expr\n          | expr NEQ expr\n    expr : MINUS expr %prec UMINUSexpr : PLUS expr %prec UPLUS"
    
_lr_action_items = {'ID':([0,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,39,45,46,47,52,53,56,],[2,2,23,2,2,2,2,2,2,2,2,2,2,2,2,2,2,41,2,2,2,50,2,2,2,]),'NAT':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,45,46,52,53,56,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'IF':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,45,46,52,53,56,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'(':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,44,45,46,52,53,56,],[5,21,5,24,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,47,5,5,5,5,5,]),'REC':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,45,46,52,53,56,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LAMBDA':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,40,45,46,52,53,56,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,44,7,7,7,7,7,]),'MINUS':([0,1,2,3,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,45,46,48,49,51,52,53,54,55,56,57,],[9,11,-1,-2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,-21,-20,-9,-10,-11,-12,-13,11,11,11,11,11,11,11,-4,-5,9,9,11,11,-7,9,9,-3,11,-8,-6,]),'PLUS':([0,1,2,3,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,45,46,48,49,51,52,53,54,55,56,57,],[8,10,-1,-2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,-21,-20,-9,-10,-11,-12,-13,10,10,10,10,10,10,10,-4,-5,8,8,10,10,-7,8,8,-3,10,-8,-6,]),'$end':([1,2,3,25,26,27,28,29,30,31,32,33,34,35,36,37,39,43,51,54,56,57,],[0,-1,-2,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-4,-5,-7,-3,-8,-6,]),'TIMES':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[12,-1,-2,12,-21,-20,12,12,-11,-12,-13,12,12,12,12,12,12,12,-4,-5,12,12,-7,-3,12,-8,-6,]),'DIVIDE':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[13,-1,-2,13,-21,-20,13,13,-11,-12,-13,13,13,13,13,13,13,13,-4,-5,13,13,-7,-3,13,-8,-6,]),'MOD':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[14,-1,-2,14,-21,-20,14,14,-11,-12,-13,14,14,14,14,14,14,14,-4,-5,14,14,-7,-3,14,-8,-6,]),'LT':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[15,-1,-2,15,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,15,-4,-5,15,15,-7,-3,15,-8,-6,]),'LE':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[16,-1,-2,16,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,16,-4,-5,16,16,-7,-3,16,-8,-6,]),'GT':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[17,-1,-2,17,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,17,-4,-5,17,17,-7,-3,17,-8,-6,]),'GE':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[18,-1,-2,18,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,18,-4,-5,18,18,-7,-3,18,-8,-6,]),'EQ':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[19,-1,-2,19,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,19,-4,-5,19,19,-7,-3,19,-8,-6,]),'NEQ':([1,2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,51,54,55,56,57,],[20,-1,-2,20,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,20,-4,-5,20,20,-7,-3,20,-8,-6,]),')':([2,3,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,51,54,55,56,57,],[-1,-2,39,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,42,-4,-5,51,-7,-3,56,-8,-6,]),'ELSE':([2,3,25,26,27,28,29,30,31,32,33,34,35,36,37,39,43,49,51,54,56,57,],[-1,-2,-21,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-4,-5,52,-7,-3,-8,-6,]),'.':([23,41,50,],[40,45,53,]),'THEN':([42,],[46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,45,46,52,53,56,],[1,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,48,49,54,55,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> ID','expr',1,'p_expr_ID','my_parser.py',45),
  ('expr -> NAT','expr',1,'p_expr_NAT','my_parser.py',52),
  ('expr -> IF ( expr ) THEN expr ELSE expr','expr',8,'p_expr_if','my_parser.py',59),
  ('expr -> ( expr )','expr',3,'p_expr_paren','my_parser.py',66),
  ('expr -> ( expr ) expr','expr',4,'p_expr_function_app','my_parser.py',73),
  ('expr -> REC ID . LAMBDA ( ID . expr ) expr','expr',10,'p_expr_function_app_rec','my_parser.py',80),
  ('expr -> LAMBDA ( ID . expr )','expr',6,'p_expr_function_abs_normal','my_parser.py',87),
  ('expr -> REC ID . LAMBDA ( ID . expr )','expr',9,'p_expr_function_abs_rec','my_parser.py',94),
  ('expr -> expr PLUS expr','expr',3,'p_expr_arith','my_parser.py',101),
  ('expr -> expr MINUS expr','expr',3,'p_expr_arith','my_parser.py',102),
  ('expr -> expr TIMES expr','expr',3,'p_expr_arith','my_parser.py',103),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_arith','my_parser.py',104),
  ('expr -> expr MOD expr','expr',3,'p_expr_arith','my_parser.py',105),
  ('expr -> expr LT expr','expr',3,'p_expr_comparisons','my_parser.py',124),
  ('expr -> expr LE expr','expr',3,'p_expr_comparisons','my_parser.py',125),
  ('expr -> expr GT expr','expr',3,'p_expr_comparisons','my_parser.py',126),
  ('expr -> expr GE expr','expr',3,'p_expr_comparisons','my_parser.py',127),
  ('expr -> expr EQ expr','expr',3,'p_expr_comparisons','my_parser.py',128),
  ('expr -> expr NEQ expr','expr',3,'p_expr_comparisons','my_parser.py',129),
  ('expr -> MINUS expr','expr',2,'p_expr_UMINUS','my_parser.py',146),
  ('expr -> PLUS expr','expr',2,'p_expr_UPLUS','my_parser.py',151),
]
